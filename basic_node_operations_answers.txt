1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

sort: This is vertically arranging each line based on how much whitespace exists at the start of each line.
      More whitespace means higher vertically. Lines that have an equal amount of whitespace in front are vertically sorted
      alphabetically.
sort commands.js output:
            done(data);
            if (err) throw err;
        });
        const fileName = fullPath[0];
        fs.readFile(fileName, (err, data) => {
      break;
      break;
      commandLibrary.cat(userInputArray.slice(1));
      commandLibrary.echo(userInputArray.slice(1).join(" "));
    case "cat":
    case "echo":
    done(userInput);
  "cat": function(fullPath){
  "echo": function(userInput){
  }
  }
  },
  const command = userInputArray[0];
  const userInputArray = userInput.split(" ");
  process.stdout.write('\nprompt > ');
  process.stdout.write(output);
  switch (command) {





}
}
};
const commandLibrary = {
const fs = require('fs');
function done(output) {
function evaluateCmd(userInput){
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;

wc: This prints the newline count, word count, and byte count of a given file.
wc commands.js output: 36  70 841 commands.js

uniq: this command removes identical adjacent lines. Handy when used with sort to remove non-adjacent duplicates.
uniq commands.js output: unchanged



2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was
   and why the specific data was outputted.

A: head commands.js | sort output:
  const command = userInputArray[0];
  const userInputArray = userInput.split(" ");
  process.stdout.write('\nprompt > ');
  process.stdout.write(output);


}
const fs = require('fs');
function done(output) {
function evaluateCmd(userInput){

head chopped out only the first ten lines of code then sort was applied to just those ten lines.


6. Given a string, reverse the order of characters in each word within a sentence while maintaining the
   original word order and whitespace and return the string.

   function reverseString(inputString) {
      let wordArr = inputString.split(' ');
      let revArr = [];
      wordArr.forEach((element) => {
        revArr.push(element.split('').reverse().join(''));
      })
      return revArr.join(' ');
}
